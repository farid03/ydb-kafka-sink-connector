services:
  zookeeper:
    image: bitnami/zookeeper
    ports:
      - "2181:2181"
    environment:
      ALLOW_ANONYMOUS_LOGIN: "yes"

  kafka:
    image: confluentinc/cp-kafka
    ports:
      - "9092:9092"
    environment:
      KAFKA_ZOOKEEPER_CONNECT: "host.docker.internal:2181"
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: "PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT"
      KAFKA_ADVERTISED_LISTENERS: "PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092"
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    depends_on:
      - zookeeper

  yandex-docker-local-ydb:
    container_name: ydb-local
    hostname: localhost
    ports:
      - 2135:2135
      - 8765:8765
      - 2136:2136
    volumes:
      - ./ydb_certs:/ydb_certs
      - ./ydb_data:/ydb_data
    environment:
      - YDB_DEFAULT_LOG_LEVEL=NOTICE
      - GRPC_TLS_PORT=2135
      - GRPC_PORT=2136
      - MON_PORT=8765
      # - YDB_USE_IN_MEMORY_PDISKS=true
    image: cr.yandex/yc/yandex-docker-local-ydb:latest

  init-kafka:
    image: confluentinc/cp-kafka
    depends_on:
      - kafka
    entrypoint: [ '/bin/sh', '-c' ]
    command: |
      "
      # blocks until kafka is reachable
      kafka-topics --bootstrap-server kafka:29092 --list

      echo -e 'Creating kafka topics'
      kafka-topics --bootstrap-server kafka:29092 --create --if-not-exists --topic mytopic --replication-factor 1 --partitions 1

      echo -e 'Successfully created the following topics:'
      kafka-topics --bootstrap-server kafka:29092 --list
      "

  local-postgres:
    image: postgres:16
    container_name: local-postgres
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U postgres" ]
      interval: 2s
      timeout: 2s
      retries: 5
    ports:
      - "5432:5432"
    environment:
      POSTGRES_DB: postgres
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    volumes:
      - pgdata:/var/lib/postgresql/data
      - ./init.sh:/docker-entrypoint-initdb.d/init.sh
    profiles: [ "postgres" ]

  ydb-postgres:
    image: ghcr.io/ydb-platform/local-ydb:nightly
    ports:
      - "5432:5432"
      - "8765:8765"
    environment:
      - "YDB_USE_IN_MEMORY_PDISKS=true"
      - "POSTGRES_USER=${YDB_PG_USER:-postgres}"
      - "POSTGRES_PASSWORD=${YDB_PG_PASSWORD:-postgres}"
      - "YDB_EXPERIMENTAL_PG=1"
    profiles: [ "ydb-postgres" ]


volumes:
  pgdata: